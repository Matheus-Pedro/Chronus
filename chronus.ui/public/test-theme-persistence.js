/**
 * SCRIPT DE TESTE DE PERSIST√äNCIA DE TEMA - CHRONUS UI
 * 
 * Este script pode ser executado no console do navegador para testar
 * a persist√™ncia das configura√ß√µes de customiza√ß√£o de cores.
 * 
 * COMO USAR:
 * 1. Abra o DevTools (F12)
 * 2. V√° na aba Console
 * 3. Cole este script e pressione Enter
 * 4. Execute: testThemePersistence()
 */

(function() {
  'use strict';

  // ==========================================
  // UTILIT√ÅRIOS DE TESTE
  // ==========================================

  const log = (message, type = 'info') => {
    const styles = {
      info: 'color: #2563eb; font-weight: bold;',
      success: 'color: #16a34a; font-weight: bold;',
      error: 'color: #dc2626; font-weight: bold;',
      warning: 'color: #ea580c; font-weight: bold;'
    };
    console.log(`%c${message}`, styles[type] || styles.info);
  };

  // ==========================================
  // TESTE DE CONFIGURA√á√ïES SALVAS
  // ==========================================

  function testSavedConfig() {
    log('üîç Verificando configura√ß√µes salvas...', 'info');
    
    const savedConfig = localStorage.getItem('chronus-theme-config');
    
    if (savedConfig) {
      try {
        const config = JSON.parse(savedConfig);
        log(`‚úÖ Configura√ß√£o encontrada:`, 'success');
        log(`   - Cor principal: ${config.primaryColor}`, 'info');
        log(`   - Tom de fundo: ${config.backgroundTone}`, 'info');
        return config;
      } catch (error) {
        log(`‚ùå Erro ao decodificar configura√ß√£o: ${error.message}`, 'error');
        return null;
      }
    } else {
      log('‚ÑπÔ∏è Nenhuma configura√ß√£o personalizada encontrada (usando padr√£o)', 'warning');
      return null;
    }
  }

  // ==========================================
  // TESTE DE VARI√ÅVEIS CSS
  // ==========================================

  function testCSSVariables() {
    log('üé® Verificando vari√°veis CSS aplicadas...', 'info');
    
    const root = document.documentElement;
    const isDark = root.classList.contains('dark');
    
    const cssVars = {
      primary: getComputedStyle(root).getPropertyValue('--primary').trim(),
      background: getComputedStyle(root).getPropertyValue('--background').trim(),
      card: getComputedStyle(root).getPropertyValue('--card').trim(),
      popover: getComputedStyle(root).getPropertyValue('--popover').trim()
    };
    
    log(`üåì Modo escuro: ${isDark}`, 'info');
    log(`üé® Vari√°veis CSS:`, 'info');
    log(`   - --primary: ${cssVars.primary || 'padr√£o'}`, 'info');
    log(`   - --background: ${cssVars.background || 'padr√£o'}`, 'info');
    log(`   - --card: ${cssVars.card || 'padr√£o'}`, 'info');
    log(`   - --popover: ${cssVars.popover || 'padr√£o'}`, 'info');
    
    return cssVars;
  }

  // ==========================================
  // TESTE DE PERSIST√äNCIA COMPLETO
  // ==========================================

  function testPersistence() {
    log('üß™ Testando mudan√ßa e persist√™ncia...', 'info');
    
    const originalConfig = testSavedConfig();
    
    // Configura√ß√£o de teste
    const testConfig = {
      primaryColor: 'red',
      backgroundTone: 'colored'
    };
    
    log('‚è≥ Aplicando configura√ß√£o de teste...', 'info');
    
    // Salvar configura√ß√£o de teste
    localStorage.setItem('chronus-theme-config', JSON.stringify(testConfig));
    
    // Simular evento de mudan√ßa
    window.dispatchEvent(new StorageEvent('storage', {
      key: 'chronus-theme-config',
      newValue: JSON.stringify(testConfig)
    }));
    
    // Aguardar um pouco para aplica√ß√£o
    setTimeout(() => {
      log('üîÑ Verificando se a configura√ß√£o foi aplicada...', 'info');
      
      const currentConfig = testSavedConfig();
      const cssVars = testCSSVariables();
      
      if (currentConfig && 
          currentConfig.primaryColor === 'red' && 
          currentConfig.backgroundTone === 'colored') {
        log('‚úÖ Configura√ß√£o de teste aplicada com sucesso!', 'success');
        
        // Verificar se CSS mudou (cor vermelha)
        if (cssVars.primary.includes('0 84.2% 60.2%') || cssVars.primary.includes('0') ) {
          log('‚úÖ Vari√°veis CSS foram atualizadas!', 'success');
        } else {
          log('‚ö†Ô∏è Vari√°veis CSS podem n√£o ter sido atualizadas', 'warning');
        }
        
        // Restaurar configura√ß√£o original
        setTimeout(() => {
          if (originalConfig) {
            localStorage.setItem('chronus-theme-config', JSON.stringify(originalConfig));
            log('üîÑ Configura√ß√£o original restaurada', 'info');
          } else {
            localStorage.removeItem('chronus-theme-config');
            log('üîÑ Configura√ß√µes resetadas para padr√£o', 'info');
          }
          
          // Recarregar para aplicar
          log('üîÑ Recarregue a p√°gina para ver a restaura√ß√£o (F5)', 'info');
        }, 2000);
        
      } else {
        log('‚ùå Configura√ß√£o de teste n√£o foi aplicada corretamente', 'error');
      }
    }, 500);
  }

  // ==========================================
  // TESTE DE SINCRONIZA√á√ÉO ENTRE ABAS
  // ==========================================

  function testCrossTabSync() {
    log('ü™ü Testando sincroniza√ß√£o entre abas...', 'info');
    log('üìã Para testar:', 'info');
    log('   1. Abra uma nova aba neste mesmo site', 'info');
    log('   2. Mude as cores em uma aba', 'info');
    log('   3. Observe se a outra aba muda automaticamente', 'info');
    
    // Listener para testar
    window.addEventListener('storage', (e) => {
      if (e.key === 'chronus-theme-config') {
        log('üîÑ Detectada mudan√ßa de tema em outra aba!', 'success');
        log(`   Nova configura√ß√£o: ${e.newValue}`, 'info');
      }
    });
    
    log('üëÇ Listener ativo - fa√ßa mudan√ßas em outra aba para testar', 'success');
  }

  // ==========================================
  // DIAGN√ìSTICO COMPLETO
  // ==========================================

  function diagnosePersistence() {
    log('üîç Diagn√≥stico completo do sistema de persist√™ncia...', 'info');
    log('=================================================', 'info');
    
    // 1. Verificar ambiente
    log('üåê Informa√ß√µes do ambiente:', 'info');
    log(`   - URL: ${window.location.href}`, 'info');
    log(`   - localStorage dispon√≠vel: ${!!window.localStorage}`, 'info');
    log(`   - sessionStorage dispon√≠vel: ${!!window.sessionStorage}`, 'info');
    
    // 2. Verificar configura√ß√µes atuais
    const config = testSavedConfig();
    const cssVars = testCSSVariables();
    
    // 3. Verificar se h√° outros dados do Chronus
    log('üì¶ Outros dados do Chronus no localStorage:', 'info');
    const chronusKeys = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && key.includes('chronus')) {
        chronusKeys.push(key);
      }
    }
    
    if (chronusKeys.length > 0) {
      chronusKeys.forEach(key => {
        log(`   - ${key}`, 'info');
      });
    } else {
      log('   - Nenhum dado do Chronus encontrado', 'warning');
    }
    
    // 4. Verificar se sistema de tema est√° ativo
    const themeCustomizer = document.querySelector('[data-theme-customizer]');
    log(`üé® Interface de customiza√ß√£o presente: ${!!themeCustomizer}`, themeCustomizer ? 'success' : 'warning');
    
    log('=================================================', 'info');
    log('‚úÖ Diagn√≥stico conclu√≠do!', 'success');
  }

  // ==========================================
  // TESTE PRINCIPAL
  // ==========================================

  function testThemePersistence() {
    log('üöÄ Iniciando teste completo de persist√™ncia de tema...', 'info');
    log('====================================================', 'info');
    
    try {
      // 1. Diagn√≥stico b√°sico
      diagnosePersistence();
      
      // 2. Teste de configura√ß√µes
      log('‚è≥ Executando teste de persist√™ncia em 3 segundos...', 'info');
      setTimeout(() => {
        testPersistence();
      }, 3000);
      
      // 3. Configurar teste de sincroniza√ß√£o
      testCrossTabSync();
      
    } catch (error) {
      log(`‚ùå Erro durante o teste: ${error.message}`, 'error');
    }
    
    log('====================================================', 'info');
    log('üìã Comandos dispon√≠veis:', 'info');
    log('   - testThemePersistence() // Teste completo', 'info');
    log('   - diagnosePersistence() // Apenas diagn√≥stico', 'info');
    log('   - testSavedConfig() // Verificar configura√ß√µes salvas', 'info');
    log('   - testCSSVariables() // Verificar CSS aplicado', 'info');
    log('   - testCrossTabSync() // Testar sincroniza√ß√£o entre abas', 'info');
  }

  // ==========================================
  // UTILIT√ÅRIOS EXTRAS
  // ==========================================

  function resetThemeConfig() {
    localStorage.removeItem('chronus-theme-config');
    log('üîÑ Configura√ß√µes de tema resetadas. Recarregue a p√°gina (F5).', 'success');
  }

  function showCurrentTheme() {
    const config = testSavedConfig();
    const cssVars = testCSSVariables();
    
    log('üìä Estado atual do tema:', 'info');
    log('========================', 'info');
    
    if (config) {
      log(`üé® Cor principal: ${config.primaryColor}`, 'info');
      log(`üåÉ Tom de fundo: ${config.backgroundTone}`, 'info');
    } else {
      log('üé® Usando configura√ß√£o padr√£o (azul + neutro)', 'info');
    }
    
    log('========================', 'info');
  }

  // ==========================================
  // EXPOR FUN√á√ïES GLOBALMENTE
  // ==========================================

  window.testThemePersistence = testThemePersistence;
  window.diagnosePersistence = diagnosePersistence;
  window.testSavedConfig = testSavedConfig;
  window.testCSSVariables = testCSSVariables;
  window.testCrossTabSync = testCrossTabSync;
  window.resetThemeConfig = resetThemeConfig;
  window.showCurrentTheme = showCurrentTheme;

  // Mostrar comandos dispon√≠veis
  log('üé® Script de teste de persist√™ncia de tema carregado!', 'success');
  log('Execute testThemePersistence() para come√ßar.', 'info');

})(); 